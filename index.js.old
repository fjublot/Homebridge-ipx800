	var Service, Characteristic;
	var request = require("request");

	module.exports = function(homebridge){
	  Service = homebridge.hap.Service;
	  Characteristic = homebridge.hap.Characteristic;
	  homebridge.registerAccessory("homebridge-http-domotika", "HttpDomotika", HttpDomotikaAccessory);
	}

	function HttpDomotikaAccessory(log, config) {
	  this.log = log;
    this.config = config;
	}

	HttpDomotikaAccessory.prototype = {
		httpRequest: function(url, callback) {
		  this.log(url);
      request({
			  url: url,
			  method: "GET",
			  rejectUnauthorized: false
			},
			function(error, response, body) {
				callback(error, response, body)
			})
		},

		//This function builds the URL.
		setUrl: function(className, classNumero, cmdID) {
			var url;
			url = this.config.url + "?app=api&apikey=" + this.config.api + "&class=" + className + "&numero=" + classNumero + "&command=" + cmdID;
			return url;
		},

		//This function turns On or Off a switch device
		setPowerState: function(powerOn, callback) {
			var url;
      var message;

			if (!this.config.set.switchCommandID && (!this.config.set.onCommandID || !this.config.set.offCommandID) ) {
				this.log.warn("No command ID defined, please check config.json file");
				callback(new Error("No command ID defined"));
				return;
			}

      if (!this.config.set.switchCommandID) { 
			if (powerOn) {
				url = this.setUrl(this.config.className, this.config.numero, this.config.set.onCommandID);
        message = "On";
			} else {
				url = this.setUrl(this.config.className, this.config.numero, this.config.set.offCommandID);
        message = "Off";
			}
      }
      else {
				url = this.setUrl(this.config.set.className, this.config.set.numero, this.config.set.switchCommandID);
        message = "Switch";

      }
			this.httpRequest(url, function(error, response, responseBody) {
				if (error) {
				  this.log("Failed: %s", error.message);
				  callback(error);
				} else {
				  this.log("Power "+message);
				  callback();
				}
			}.bind(this));
		},

		//This function get a switch state
		getState: function(callback) {
			var url;

			/*
      if (!this.configstateCommandID) {
				this.log.warn("No state command ID defined");
				callback(new Error("No status command ID defined"));
				return;
			}
      */
			url = this.setUrl(this.config.get.className, this.config.get.numero, "GetState");
			this.httpRequest(url, function(error, response, responseBody) {
				if (error) {
					this.log("Failed: %s", error.message);
					callback(error);
				} else {
          var JsonResult = JSON.parse(responseBody);
          var binaryState = parseInt(JsonResult.value);
					var powerOn = binaryState > 0;
          if (this.config.service=="SecuritySystem")
            if (powerOn)
              powerOn=Characteristic.SecuritySystemCurrentState.AWAY_ARM;
            else
              powerOn=Characteristic.SecuritySystemCurrentState.DISARMED;
            
					this.log("Power state is currently %s", binaryState);
					callback(null, powerOn);
				}
			}.bind(this));
		},

    getBtnState: function(callback) {
			var url;

			/*
      if (!this.stateCommandID) {
				this.log.warn("No state command ID defined");
				return;
			}
      */

			url = this.setUrl(this.config.className, this.config.numero, "GetState");
			this.httpRequest(url, function(error, response, responseBody) {
				if (error) {
					this.log("HTTP get power function failed: %s", error.message);
					callback(error);
				} else {
          var JsonResult = JSON.parse(responseBody);
          var binaryState = parseInt(JsonResult.value);
          var message = JsonResult.message;
					if (binaryState == 1)
            var powerOn = false;
          else
            var powerOn = true;
          if (this.config.get.inverseState =="1" && powerOn == false)
             powerOn = true; 
          if (this.config.get.inverseState =="1" && powerOn == true)
             powerOn = false; 
           this.log("Status is currently %s", message);
					callback(null, powerOn);
				}
			}.bind(this));
		},
    
    setBtnState: function(callback) {
			var url;

			if (!this.config.set.switchCommandID && (!this.config.set.onCommandID || !this.config.set.offCommandID) ) {
				this.log.warn("No command ID defined, please check config.json file");
				callback(new Error("No command ID defined"));
				return;
			}
      
      if (!this.config.set.switchCommandID) { 
			if (powerOn) {
				url = this.setUrl(this.config.className, this.config.numero, this.config.set.onCommandID);
        message = "On";
			} else {
				url = this.setUrl(this.config.className, this.config.numero, this.config.set.offCommandID);
        message = "Off";
			}
      }
      else {
				url = this.setUrl(this.config.set.className, this.config.set.numero, this.config.set.switchCommandID);
        message = "Switch";

      }


			this.httpRequest(url, function(error, response, responseBody) {
				if (error) {
					this.log("HTTP get power function failed: %s", error.message);
					callback(error);
				} 
			}.bind(this));
		},
    

		getAn: function(callback) {
			var url;

			/*
      if (!this.stateCommandID) {
				this.log.warn("No state command ID defined");
				callback(new Error("No state command ID defined"));
				return;
			}
      */

			url = this.setUrl(this.config.className, this.config.numero, "GetState");
			this.httpRequest(url, function(error, response, responseBody) {
				if (error) {
					this.log("HTTP get an function failed: %s", error.message);
					callback(error);
				} else {
          var JsonResult = JSON.parse(responseBody);
					var floatState = parseFloat(JsonResult.value);
					this.log("Sensor " + this.config.name + " is currently %s", floatState);
					callback(null, floatState);
				}
			}.bind(this));
		},

		getHumidity: function(callback) {
			var url;

			/*
      if (!this.humidityCommandID) {
				this.log.warn("No humidity command ID defined");
				callback(new Error("No humidity command ID defined"));
				return;
			}
      */

			url = this.setUrl(this.config.className,  this.config.numero, "GetState");

			this.log("Getting current humidity for sensor " + this.config.name );

			this.httpRequest(url, function(error, response, responseBody) {
				if (error) {
					this.log("HTTP get humidity function failed: %s", error.message);
					callback(error);
				} else {
					var floatState = parseFloat(responseBody);
					this.log("Humidity for sensor " + this.config.name + " is currently %s", floatState);
					callback(null, floatState);
				}
			}.bind(this));
		},

		identify: function(callback) {
			this.log("Identify requested");
			callback();
		},

		getServices: function() {
			// you can OPTIONALLY create an information service if you wish to override
			// the default values for things like serial number, model, etc.
			var informationService = new Service.AccessoryInformation();

			informationService
			.setCharacteristic(Characteristic.Manufacturer, "HTTP Manufacturer")
			.setCharacteristic(Characteristic.Model, "IPX800")
			.setCharacteristic(Characteristic.SerialNumber, "000000000");

			if (this.config.className == "relai" || this.config.className == "razdevice") {
				this.log("Defining a Relai module");
        switch (this.config.service) {
          case "Switch":
          //Statements executed when the result of expression matches value1
  				var Relai = new Service.Switch(this.config.name);
   				Relai
  				.getCharacteristic(Characteristic.On)
  				.on('get', this.getState.bind(this))
  				.on('set', this.setPowerState.bind(this));
  				return [Relai];
          break;

          case "SecuritySystem":
          //Statements executed when the result of expression matches value1
  				var Security = new Service.SecuritySystem(this.config.name);
   				Security
  				.getCharacteristic(Characteristic.SecuritySystemCurrentState)
  				.on('get', this.getState.bind(this))
   				Security
          .getCharacteristic(Characteristic.SecuritySystemTargetState)
  				.on('set', this.setPowerState.bind(this));
          return [Security];
          
          
          break;

          
          
          case "WindowCovering":
          //Statements executed when the result of expression matches value2
  				var Relai = new Service.WindowCovering(this.config.name);
   				Relai
  				.getCharacteristic(Characteristic.CurrentPosition)
  				.on('set', this.setPowerState.bind(this));
  				return [Relai];
          break;
          
          default:
          //Statements executed when none of the values match the value of the expression
  				var Relai = new Service.Switch(this.config.name);
   				Relai
  				.getCharacteristic(Characteristic.On)
  				.on('get', this.getState.bind(this))
  				.on('set', this.setPowerState.bind(this));
  				return [Relai];
          break;
        }
			} 
      else if (this.config.className == "btn"){
       switch (this.config.service) {
          case "OccupancySensor":
    				this.log("Defining a Btn (OccupancySensor) module");
    				var Btn = new Service.OccupancySensor(this.config.name);
    				Btn
    				.getCharacteristic(Characteristic.OccupancyDetected)
    				.on('get', this.getBtnState.bind(this))
    				.on('set', this.setBtnState.bind(this));
    				return [Btn];
          break;
          case "SecuritySystem":
    				this.log("Defining a Btn (SecuritySystem) module");
    				var Btn = new Service.SecuritySystem(this.config.name);
    				Btn
    				.getCharacteristic(Characteristic.SecuritySystemCurrentState)
    				.on('get', this.getBtnState.bind(this));
    				return [Btn];
          break;
          default:
          //Statements executed when none of the values match the value of the expression
    				this.log("Defining a Btn (LockMechanism) module");
    				var Btn = new Service.LockMechanism(this.config.name);
    				Btn
    				.getCharacteristic(Characteristic.LockTargetState)
    				.on('get', this.getBtnState.bind(this))
    				.on('set', this.setBtnState.bind(this));
    				return [Btn];
          break;
       }
			} 	    
      else if (this.config.className == "an") {
        switch (this.config.service) {
          case "TemperatureSensor":
				    this.log("Defining an An.TemperatureSensor module");
        		var AnService = new Service.TemperatureSensor(this.config.name);
    				AnService
    				.getCharacteristic(Characteristic.CurrentTemperature)
    				.on('get', this.getAn.bind(this));
    				return [informationService, AnService];
			      break;
          case "HumiditySensor":
				    this.log("Defining an An.HumiditySensor module");
    				var AnService = new Service.TemperatureSensor(this.config.name);
    				AnService
    				.getCharacteristic(Characteristic.CurrentTemperature)
    				.on('get', this.getAn.bind(this));
    				return [informationService, AnService];
			      break;
          default:
          //Statements executed when none of the values match the value of the expression
				    this.log("Defining an An.HumiditySensor (Default) module");
     				var AnService = new Service.TemperatureSensor(this.config.name);
    				AnService
    				.getCharacteristic(Characteristic.CurrentTemperature)
    				.on('get', this.getAn.bind(this));
    				return [informationService, AnService];
			      break;
        }
            
        } 
      else {
				var humidityService = new Service.HumiditySensor(this.config.name);
				humidityService
				.getCharacteristic(Characteristic.CurrentRelativeHumidity)
				.on('get', this.getHumidity.bind(this));
				return [informationService, humidityService];
			}
		}
	}
